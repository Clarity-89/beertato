type HopIngredient {
  id: ID!
  amount: Float!
  timing: Float!
  hop: Hop!
}

input HopIngredientInput {
  amount: Float!
  timing: Float!
  hop: ID!
}

type GrainIngredient {
  id: ID!
  amount: Float!
  timing: Float!
  grain: Grain!
}

type YeastIngredient {
  id: ID!
  amount: Float!
  yeast: Yeast!
}

type AdjunctIngredient {
  id: ID!
  amount: Float!
  adjunct: Adjunct!
}

type Recipe {
  id: ID!
  name: String!
  volume: Int
  boilVolume: Int
  abv: Float
  originalGravity: Float
  finalGravity: Float
  notes: String
  description: String
  ebc: Float
  ibu: Int
  srm: Float
  ph: Float
  attenuation: Float
  mashTemp: Int
  mashDuration: Float
  fermentationTemp: Int
  fermentationDuration: Int
  hopIngredients: [HopIngredient]
  grainIngredientss: [GrainIngredient]
  adjunctIngredients: [AdjunctIngredient]
  yeastIngredients: [YeastIngredient]
}

input RecipeInput {
  name: String!
  volume: Int
  boilVolume: Int
  abv: Float
  originalGravity: Float
  finalGravity: Float
  notes: String
  description: String
  ebc: Float
  ibu: Int
  srm: Float
  ph: Float
  attenuation: Float
  mashTemp: Int
  mashDuration: Float
  fermentationTemp: Int
  fermentationDuration: Int
  hops: [HopIngredientInput]
  grains: [ID]
  adjuncts: [ID]
  yeast: [ID]
}

extend type Query {
  recipes: [Recipe] @authenticated
}

extend type Mutation {
  addRecipe(input: RecipeInput!): Recipe @authenticated
  updateRecipe(input: RecipeInput!): Recipe @authenticated
  deleteRecipe(id: ID!): ID @authenticated
}
